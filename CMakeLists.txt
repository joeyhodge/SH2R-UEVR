# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

 
add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)

project(sh2r-proj)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

set(ASMJIT_STATIC ON CACHE BOOL "" FORCE)

if ("${CMAKE_BUILD_TYPE}" MATCHES "Release")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MT")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MT")

    # Statically compile runtime
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")

    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded")
    message(NOTICE "Building in Release mode")
endif()

include(FetchContent)

message(STATUS "Fetching bddisasm (v1.34.10)...")
FetchContent_Declare(bddisasm
	GIT_REPOSITORY
		"https://github.com/bitdefender/bddisasm"
	GIT_TAG
		v1.34.10
)
FetchContent_MakeAvailable(bddisasm)

message(STATUS "Fetching spdlog (76fb40d95455f249bd70824ecfcae7a8f0930fa3)...")
FetchContent_Declare(spdlog
	GIT_REPOSITORY
		"https://github.com/gabime/spdlog"
	GIT_TAG
		76fb40d95455f249bd70824ecfcae7a8f0930fa3
)
FetchContent_MakeAvailable(spdlog)

message(STATUS "Fetching kananlib (153b177593a97042a57608b36d4253fa5e982914)...")
FetchContent_Declare(kananlib
	GIT_REPOSITORY
		"https://github.com/cursey/kananlib"
	GIT_TAG
		153b177593a97042a57608b36d4253fa5e982914
)
FetchContent_MakeAvailable(kananlib)

# Target glm_static
set(CMKR_TARGET glm_static)
set(glm_static_SOURCES "")

list(APPEND glm_static_SOURCES
	"dependencies/glm/glm/detail/glm.cpp"
)

list(APPEND glm_static_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${glm_static_SOURCES})
add_library(glm_static STATIC)

if(glm_static_SOURCES)
	target_sources(glm_static PRIVATE ${glm_static_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${glm_static_SOURCES})

target_include_directories(glm_static PUBLIC
	"dependencies/glm"
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target sh2r
set(CMKR_TARGET sh2r)
set(sh2r_SOURCES "")

list(APPEND sh2r_SOURCES
	"src/Plugin.cpp"
	"src/Plugin.hpp"
	"src/uevr/API.hpp"
	"src/uevr/Plugin.hpp"
	"src/uevr/API.h"
)

list(APPEND sh2r_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${sh2r_SOURCES})
add_library(sh2r SHARED)

if(sh2r_SOURCES)
	target_sources(sh2r PRIVATE ${sh2r_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${sh2r_SOURCES})


target_compile_features(sh2r PUBLIC
	cxx_std_23
)

target_compile_options(sh2r PUBLIC
	"/GS-"
	"/bigobj"
	"/EHa"
	"/MP"
)

target_include_directories(sh2r PUBLIC
	"shared/"
	"src/"
	"include/"
)

target_link_libraries(sh2r PUBLIC
	kananlib
	glm_static
)

target_compile_definitions(sh2r PUBLIC 
    NOMINMAX
    WINVER=0x0A00
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

